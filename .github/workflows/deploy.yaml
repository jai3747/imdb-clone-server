name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: http://myapp.jayachandran.xyz
  # Update with your current repository names if different
  FRONTEND_REPO: jai3747/imdb-clone-client
  BACKEND_REPO: jai3747/imdb-clone-server
  FRONTEND_IMAGE: jai3747/imdb-clone-frontend-prod
  BACKEND_IMAGE: jai3747/imdb-clone-backend-prod
  HELM_VERSION: v3.12.0
  CHART_PATH: ./imdb-clone
  BACKEND_API_URL: http://34.93.196.67:5000
  DEBUG_WORKFLOW: 'true'

jobs:
  # Frontend Security Scans
  frontend-trufflehog:
    name: üê∑ Frontend TruffleHog
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        fetch-depth: 0
        clean: true
        ref: main

    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: ./frontend
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-frontend-report.json

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-trufflehog-report
        path: trufflehog-frontend-report.json
        retention-days: 30

  frontend-semgrep:
    name: üîç Frontend Semgrep
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        ref: main

    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-frontend-results.json
        json: true
        publishToken: ${{ secrets.SEMGREP_TOKEN }}
        publishDeployment: 123
        workdir: ./frontend

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-semgrep-report
        path: semgrep-frontend-results.json
        retention-days: 30

  frontend-snyk:
    name: üõ°Ô∏è Frontend Snyk
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        ref: main

    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-frontend-report.json
        args: --all-projects --sarif-file-output=snyk.sarif
        working-directory: ./frontend

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-snyk-report
        path: snyk-frontend-report.json
        retention-days: 30

  frontend-checkov:
    name: üèóÔ∏è Frontend Checkov
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        ref: main

    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: ./frontend
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-frontend-report.json

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-checkov-report
        path: checkov-frontend-report.json
        retention-days: 30

  frontend-kubesec:
    name: üéØ Frontend Kubesec
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        ref: main

    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/

    - name: Run kubesec scans
      continue-on-error: true
      run: |
        mkdir -p kubesec-reports
        cd frontend
        for file in backup.yaml backup-pipeline.yaml pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "../kubesec-reports/kubesec-frontend-$(basename "$file" .yaml)-report.json" || true
          fi
        done

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-kubesec-reports
        path: kubesec-reports/
        retention-days: 30

  # Backend Security Scans
  backend-trufflehog:
    name: üê∑ Backend TruffleHog
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        fetch-depth: 0
        clean: true
        ref: main

    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: ./backend
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-backend-report.json

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-trufflehog-report
        path: trufflehog-backend-report.json
        retention-days: 30

  backend-semgrep:
    name: üîç Backend Semgrep
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        ref: main

    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-backend-results.json
        json: true
        publishToken: ${{ secrets.SEMGREP_TOKEN }}
        publishDeployment: 123
        workdir: ./backend

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-semgrep-report
        path: semgrep-backend-results.json
        retention-days: 30

  backend-snyk:
    name: üõ°Ô∏è Backend Snyk
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        ref: main

    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-backend-report.json
        args: --all-projects --sarif-file-output=snyk.sarif
        working-directory: ./backend

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-snyk-report
        path: snyk-backend-report.json
        retention-days: 30

  backend-checkov:
    name: üèóÔ∏è Backend Checkov
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        ref: main

    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: ./backend
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-backend-report.json

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-checkov-report
        path: checkov-backend-report.json
        retention-days: 30

  backend-kubesec:
    name: üéØ Backend Kubesec
    runs-on: ubuntu-latest
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        ref: main

    - name: Checkout Main Repo for Helm Charts
      uses: actions/checkout@v4
      with:
        path: main-repo
        clean: true
        ref: main

    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'

    - name: Create merged Helm templates
      run: |
        if [ -d "main-repo/imdb-clone" ]; then
          cd main-repo
          helm template imdb-clone ./imdb-clone > ../all-manifests.yaml || true
        else
          echo "Helm chart directory not found, skipping helm template scan"
        fi

    - name: Run kubesec scans
      continue-on-error: true
      run: |
        mkdir -p kubesec-reports
        cd backend
        for file in k8.yaml test-working-fine.yaml all-tested-pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "../kubesec-reports/kubesec-backend-$(basename "$file" .yaml)-report.json" || true
          fi
        done
        cd ..
        
        if [ -f "all-manifests.yaml" ]; then
          kubesec scan -f json all-manifests.yaml > kubesec-reports/kubesec-backend-helm-report.json || true
        fi

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-kubesec-reports
        path: kubesec-reports/
        retention-days: 30
  
  frontend-build:
    name: üöÄ Frontend Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov, frontend-kubesec]
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/frontend
      
    # Fresh checkout of the frontend repository
    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        fetch-depth: 1
        ref: main

    - name: Verify clean checkout
      run: |
        echo "Current directory structure:"
        ls -la
        echo "Frontend directory content:"
        ls -la ./frontend
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        rm -rf node_modules
        npm ci --no-cache --legacy-peer-deps
    
    # Configure API endpoint for production
    - name: Configure Environment
      working-directory: ./frontend
      run: |
        echo "Configuring API endpoint for production"
        # Create or update .env file with the backend service URL
        echo "REACT_APP_API_URL=${{ env.BACKEND_API_URL }}" > .env
        echo "REACT_APP_API_TIMEOUT=30000" >> .env
        echo "Environment configuration:"
        cat .env
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
          REACT_APP_API_URL=${{ env.BACKEND_API_URL }}
          REACT_APP_API_TIMEOUT=30000
        no-cache: true
        pull: true

  # Build the backend image from latest code
  backend-build:
    name: üöÄ Backend Build & Push
    runs-on: ubuntu-latest
    needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov, backend-kubesec]
    steps:
    - name: Completely clean workspace
      run: |
        rm -rf $GITHUB_WORKSPACE/*
        rm -rf $GITHUB_WORKSPACE/.[!.]*
        mkdir -p $GITHUB_WORKSPACE/backend
    
    # Fresh checkout of the backend repository
    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        fetch-depth: 1
        ref: main

    - name: Verify clean checkout
      run: |
        echo "Current directory structure:"
        ls -la
        echo "Backend directory content:"
        ls -la ./backend

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        rm -rf node_modules
        npm ci --no-cache
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
          MONGO_URL=${{ secrets.MONGO_URL }}
        no-cache: true
        pull: true

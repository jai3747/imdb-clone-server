name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: http://myapp.jayachandran.xyz
  FRONTEND_IMAGE: jai3747/imdb-clone-frontend-prod
  BACKEND_IMAGE: jai3747/imdb-clone-backend-prod
  HELM_VERSION: v3.12.0
  CHART_PATH: ./imdb-clone
  DEBUG_WORKFLOW: 'true'

jobs:
  # Frontend Security Scans
  frontend-trufflehog:
    name: 🐷 Frontend TruffleHog
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
        clean: true
        force: true
    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-trufflehog-report
        path: trufflehog-frontend-report.json
        retention-days: 30

  frontend-semgrep:
    name: 🔍 Frontend Semgrep
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-frontend-results.json
        json: true
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-semgrep-report
        path: semgrep-frontend-results.json
        retention-days: 30

  frontend-snyk:
    name: 🛡️ Frontend Snyk
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-snyk-report
        path: snyk-frontend-report.json
        retention-days: 30

  frontend-checkov:
    name: 🏗️ Frontend Checkov
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-checkov-report
        path: checkov-frontend-report.json
        retention-days: 30

  frontend-kubesec:
    name: 🎯 Frontend Kubesec
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
    - name: Run kubesec scans
      continue-on-error: true
      run: |
        for file in backup.yaml backup-pipeline.yaml pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "kubesec-frontend-$(basename "$file" .yaml)-report.json" || true
          fi
        done
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-kubesec-reports
        path: kubesec-frontend-*.json
        retention-days: 30

  # Backend Security Scans
  backend-trufflehog:
    name: 🐷 Backend TruffleHog
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
        clean: true
        force: true
    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-trufflehog-report
        path: trufflehog-backend-report.json
        retention-days: 30

  backend-semgrep:
    name: 🔍 Backend Semgrep
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-backend-results.json
        json: true
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-semgrep-report
        path: semgrep-backend-results.json
        retention-days: 30

  backend-snyk:
    name: 🛡️ Backend Snyk
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-snyk-report
        path: snyk-backend-report.json
        retention-days: 30

  backend-checkov:
    name: 🏗️ Backend Checkov
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-checkov-report
        path: checkov-backend-report.json
        retention-days: 30

  backend-kubesec:
    name: 🎯 Backend Kubesec
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'
    - name: Create merged Helm templates
      run: |
        helm template imdb-clone ./imdb-clone > all-manifests.yaml || true
    - name: Run kubesec scans
      continue-on-error: true
      run: |
        for file in k8.yaml test-working-fine.yaml all-tested-pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "kubesec-backend-$(basename "$file" .yaml)-report.json" || true
          fi
        done

        if [ -f "all-manifests.yaml" ]; then
          kubesec scan -f json all-manifests.yaml > kubesec-backend-helm-report.json || true
        fi
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-kubesec-reports
        path: kubesec-backend-*.json
        retention-days: 30
  
  # Build the frontend image from latest code
  frontend-build:
    name: 🚀 Frontend Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov, frontend-kubesec]
    steps:
    - name: Clean workspace
      run: |
        rm -rf ./*
        rm -rf ./.* || true
    
    # Checkout the main repository first (the one where the pipeline is running)
    - name: Checkout Main Repo
      uses: actions/checkout@v4
      
    # Now checkout the frontend code with clean workspace option
    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-client
        token: ${{ secrets.GH_PAT }}
        path: frontend
        clean: true
        fetch-depth: 1
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        npm install --legacy-peer-deps
        npm cache verify
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
        no-cache: true
        pull: true

  # Build the backend image from latest code
  backend-build:
    name: 🚀 Backend Build & Push
    runs-on: ubuntu-latest
    needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov, backend-kubesec]
    steps:
    - name: Clean workspace
      run: |
        rm -rf ./*
        rm -rf ./.* || true
    
    # Checkout the main repository first (the one where the pipeline is running)
    - name: Checkout Main Repo
      uses: actions/checkout@v4
      
    # Now checkout the backend code with clean workspace option
    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-clone-server
        token: ${{ secrets.GH_PAT }}
        path: backend
        clean: true
        fetch-depth: 1
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        npm install
        npm cache verify
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
        no-cache: true
        pull: true
        
  # Deploy to Kubernetes
  deploy:
    name: 🚢 Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.GCP_PROJECT_ID }}
        
    - name: Generate deploy timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        
    - name: Deploy with Helm
      run: |
        helm upgrade --install imdb-clone ${{ env.CHART_PATH }} \
          --set frontend.image.repository=${{ env.FRONTEND_IMAGE }} \
          --set frontend.image.tag=latest \
          --set backend.image.repository=${{ env.BACKEND_IMAGE }} \
          --set backend.image.tag=latest \
          --set backend.mongoUrl=${{ secrets.MONGO_URL }} \
          --set global.domain=${{ env.APP_DOMAIN }} \
          --set global.deployTime="${{ steps.timestamp.outputs.timestamp }}"
        
    - name: Verify Deployment
      run: |
        kubectl get pods
        kubectl get svc
        echo "Deployment completed successfully at $(date)"
